"use strict";(self.webpackChunkfk_api_platform_docs=self.webpackChunkfk_api_platform_docs||[]).push([[7889],{95042:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>m,contentTitle:()=>h,default:()=>k,frontMatter:()=>g,metadata:()=>u,toc:()=>_});var i=s(87462),a=(s(67294),s(3905)),n=s(38055),l=(s(47878),s(55878)),r=s(51663),o=(s(98045),s(91795)),p=s(18211),d=s(55985),c=s(85162);const g={id:"listing-search",title:"Listing Search",description:"It lets the seller/partner to fetch all of the seller's listings along with FSN and SKU in a batch of 500. Payload can contain `listing_status` and `page_id`. One can pass ACTIVE/INACTIVE in the `listing_status` or don't pass the `listing_status` field for fetching all the listings. `page_id` can be null or encrypted `page_id`. Provide null as the `page_id` when retrieving the first page. For subsequent pages, use the `next_page_id` from the previous response as the `page_id`, but only if `has_more` is true.",sidebar_label:"Listing Search",hide_title:!0,hide_table_of_contents:!0,api:{tags:["Listings V3"],description:"It lets the seller/partner to fetch all of the seller's listings along with FSN and SKU in a batch of 500. Payload can contain `listing_status` and `page_id`. One can pass ACTIVE/INACTIVE in the `listing_status` or don't pass the `listing_status` field for fetching all the listings. `page_id` can be null or encrypted `page_id`. Provide null as the `page_id` when retrieving the first page. For subsequent pages, use the `next_page_id` from the previous response as the `page_id`, but only if `has_more` is true.",operationId:"listingSearch",requestBody:{content:{"application/json":{schema:{type:"object",properties:{filters:{type:"object",properties:{lisitng_status:{type:"string",enum:["ACTIVE","INACTIVE"]}},title:"BulkListingFilter"},page_id:{type:"string"}},title:"BulkListingRequest"}}},required:!0},responses:{200:{description:"successful operation",content:{"application/json":{schema:{type:"object",properties:{next_page_id:{type:"string"},has_more:{type:"boolean"},listings:{type:"object",properties:{listing_id:{type:"string"},product_id:{type:"string"},sku_id:{type:"string"}},title:"BulkListing"}},title:"BulkListingResponse"}}}}},"x-codegen-request-body-name":"body",method:"post",path:"/sellers/listings/v3/search",servers:[{url:"https://api.flipkart.net"},{url:"https://sandbox-api.flipkart.net"}],security:[{Bearer:[]}],securitySchemes:{Bearer:{type:"apiKey",name:"Authorization",in:"header"}},jsonRequestBodyExample:{filters:{lisitng_status:"ACTIVE"},page_id:"string"},info:{title:"Flipkart Marketplace API",description:"This API is offered by Flipkart Marketplace to sellers and partners for orders and listing management. <br /><br />You will need an access token to explore our APIs in the sandbox environment. For details on getting an access token, refer to the <a href='https://seller.flipkart.com/api-docs/FMSAPI.html#sandbox-environment'> documentation</a>. <br />Once you get the access token, use it to authorize the requests using the  <code>Authorize</code> button below. e.g. if your access token is <code>ACCTOK1</code>, the input for authorization should be <code>Bearer ACCTOK1</code>",contact:{name:"API Support",email:"seller-api-queries@flipkart.com"},version:"3.0"},postman:{name:"Listing Search",description:{content:"It lets the seller/partner to fetch all of the seller's listings along with FSN and SKU in a batch of 500. Payload can contain `listing_status` and `page_id`. One can pass ACTIVE/INACTIVE in the `listing_status` or don't pass the `listing_status` field for fetching all the listings. `page_id` can be null or encrypted `page_id`. Provide null as the `page_id` when retrieving the first page. For subsequent pages, use the `next_page_id` from the previous response as the `page_id`, but only if `has_more` is true.",type:"text/plain"},url:{path:["sellers","listings","v3","search"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Content-Type",value:"application/json"},{key:"Accept",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}}}},sidebar_class_name:"post api-method",info_path:"docs/mp-api_versioned/flipkart-marketplace-api",custom_edit_url:null},h=void 0,u={unversionedId:"mp-api_versioned/listing-search",id:"mp-api_versioned/listing-search",title:"Listing Search",description:"It lets the seller/partner to fetch all of the seller's listings along with FSN and SKU in a batch of 500. Payload can contain `listing_status` and `page_id`. One can pass ACTIVE/INACTIVE in the `listing_status` or don't pass the `listing_status` field for fetching all the listings. `page_id` can be null or encrypted `page_id`. Provide null as the `page_id` when retrieving the first page. For subsequent pages, use the `next_page_id` from the previous response as the `page_id`, but only if `has_more` is true.",source:"@site/docs/mp-api_versioned/listing-search.api.mdx",sourceDirName:"mp-api_versioned",slug:"/mp-api_versioned/listing-search",permalink:"/fk-api-platform-docs/docs/mp-api_versioned/listing-search",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"listing-search",title:"Listing Search",description:"It lets the seller/partner to fetch all of the seller's listings along with FSN and SKU in a batch of 500. Payload can contain `listing_status` and `page_id`. One can pass ACTIVE/INACTIVE in the `listing_status` or don't pass the `listing_status` field for fetching all the listings. `page_id` can be null or encrypted `page_id`. Provide null as the `page_id` when retrieving the first page. For subsequent pages, use the `next_page_id` from the previous response as the `page_id`, but only if `has_more` is true.",sidebar_label:"Listing Search",hide_title:!0,hide_table_of_contents:!0,api:{tags:["Listings V3"],description:"It lets the seller/partner to fetch all of the seller's listings along with FSN and SKU in a batch of 500. Payload can contain `listing_status` and `page_id`. One can pass ACTIVE/INACTIVE in the `listing_status` or don't pass the `listing_status` field for fetching all the listings. `page_id` can be null or encrypted `page_id`. Provide null as the `page_id` when retrieving the first page. For subsequent pages, use the `next_page_id` from the previous response as the `page_id`, but only if `has_more` is true.",operationId:"listingSearch",requestBody:{content:{"application/json":{schema:{type:"object",properties:{filters:{type:"object",properties:{lisitng_status:{type:"string",enum:["ACTIVE","INACTIVE"]}},title:"BulkListingFilter"},page_id:{type:"string"}},title:"BulkListingRequest"}}},required:!0},responses:{200:{description:"successful operation",content:{"application/json":{schema:{type:"object",properties:{next_page_id:{type:"string"},has_more:{type:"boolean"},listings:{type:"object",properties:{listing_id:{type:"string"},product_id:{type:"string"},sku_id:{type:"string"}},title:"BulkListing"}},title:"BulkListingResponse"}}}}},"x-codegen-request-body-name":"body",method:"post",path:"/sellers/listings/v3/search",servers:[{url:"https://api.flipkart.net"},{url:"https://sandbox-api.flipkart.net"}],security:[{Bearer:[]}],securitySchemes:{Bearer:{type:"apiKey",name:"Authorization",in:"header"}},jsonRequestBodyExample:{filters:{lisitng_status:"ACTIVE"},page_id:"string"},info:{title:"Flipkart Marketplace API",description:"This API is offered by Flipkart Marketplace to sellers and partners for orders and listing management. <br /><br />You will need an access token to explore our APIs in the sandbox environment. For details on getting an access token, refer to the <a href='https://seller.flipkart.com/api-docs/FMSAPI.html#sandbox-environment'> documentation</a>. <br />Once you get the access token, use it to authorize the requests using the  <code>Authorize</code> button below. e.g. if your access token is <code>ACCTOK1</code>, the input for authorization should be <code>Bearer ACCTOK1</code>",contact:{name:"API Support",email:"seller-api-queries@flipkart.com"},version:"3.0"},postman:{name:"Listing Search",description:{content:"It lets the seller/partner to fetch all of the seller's listings along with FSN and SKU in a batch of 500. Payload can contain `listing_status` and `page_id`. One can pass ACTIVE/INACTIVE in the `listing_status` or don't pass the `listing_status` field for fetching all the listings. `page_id` can be null or encrypted `page_id`. Provide null as the `page_id` when retrieving the first page. For subsequent pages, use the `next_page_id` from the previous response as the `page_id`, but only if `has_more` is true.",type:"text/plain"},url:{path:["sellers","listings","v3","search"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Content-Type",value:"application/json"},{key:"Accept",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}}}},sidebar_class_name:"post api-method",info_path:"docs/mp-api_versioned/flipkart-marketplace-api",custom_edit_url:null},sidebar:"mpapi-3.0.0",previous:{title:"Create listing request",permalink:"/fk-api-platform-docs/docs/mp-api_versioned/create-listings"},next:{title:"Hyperlocal Marketplace Listings v3",permalink:"/fk-api-platform-docs/docs/mp-api_versioned/hyperlocal-marketplace-listings-v-3"}},m={},_=[],f={toc:_},y="wrapper";function k(e){let{components:t,...s}=e;return(0,a.kt)(y,(0,i.Z)({},f,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{className:"openapi__heading"},"Listing Search"),(0,a.kt)(l.Z,{method:"post",path:"/sellers/listings/v3/search",mdxType:"MethodEndpoint"}),(0,a.kt)("p",null,"It lets the seller/partner to fetch all of the seller's listings along with FSN and SKU in a batch of 500. Payload can contain ",(0,a.kt)("inlineCode",{parentName:"p"},"listing_status")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"page_id"),". One can pass ACTIVE/INACTIVE in the ",(0,a.kt)("inlineCode",{parentName:"p"},"listing_status")," or don't pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"listing_status")," field for fetching all the listings. ",(0,a.kt)("inlineCode",{parentName:"p"},"page_id")," can be null or encrypted ",(0,a.kt)("inlineCode",{parentName:"p"},"page_id"),". Provide null as the ",(0,a.kt)("inlineCode",{parentName:"p"},"page_id")," when retrieving the first page. For subsequent pages, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"next_page_id")," from the previous response as the ",(0,a.kt)("inlineCode",{parentName:"p"},"page_id"),", but only if ",(0,a.kt)("inlineCode",{parentName:"p"},"has_more")," is true."),(0,a.kt)(r.Z,{className:"openapi-tabs__mime",mdxType:"MimeTabs"},(0,a.kt)(c.Z,{label:"application/json",value:"application/json-schema",mdxType:"TabItem"},(0,a.kt)("details",{style:{},className:"openapi-markdown__details","data-collapsed":!1,open:!0},(0,a.kt)("summary",{style:{textAlign:"left"}},(0,a.kt)("strong",null,"Request Body"),(0,a.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," required")),(0,a.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,a.kt)("ul",{style:{marginLeft:"1rem"}},(0,a.kt)(p.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,a.kt)("details",{style:{},className:"openapi-markdown__details"},(0,a.kt)("summary",{style:{}},(0,a.kt)("strong",null,"filters"),(0,a.kt)("span",{style:{opacity:"0.6"}}," object")),(0,a.kt)("div",{style:{marginLeft:"1rem"}},(0,a.kt)(p.Z,{collapsible:!1,name:"lisitng_status",required:!1,schemaName:"string",qualifierMessage:"**Possible values:** [`ACTIVE`, `INACTIVE`]",schema:{type:"string",enum:["ACTIVE","INACTIVE"]},mdxType:"SchemaItem"})))),(0,a.kt)(p.Z,{collapsible:!1,name:"page_id",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}))))),(0,a.kt)("div",null,(0,a.kt)("div",null,(0,a.kt)(n.Z,{mdxType:"ApiTabs"},(0,a.kt)(c.Z,{label:"200",value:"200",mdxType:"TabItem"},(0,a.kt)("div",null,(0,a.kt)("p",null,"successful operation")),(0,a.kt)("div",null,(0,a.kt)(r.Z,{className:"openapi-tabs__mime",schemaType:"response",mdxType:"MimeTabs"},(0,a.kt)(c.Z,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,a.kt)(d.Z,{className:"openapi-tabs__schema",mdxType:"SchemaTabs"},(0,a.kt)(c.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,a.kt)("details",{style:{},className:"openapi-markdown__details","data-collapsed":!1,open:!0},(0,a.kt)("summary",{style:{textAlign:"left"}},(0,a.kt)("strong",null,"Schema")),(0,a.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,a.kt)("ul",{style:{marginLeft:"1rem"}},(0,a.kt)(p.Z,{collapsible:!1,name:"next_page_id",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,a.kt)(p.Z,{collapsible:!1,name:"has_more",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{type:"boolean"},mdxType:"SchemaItem"}),(0,a.kt)(p.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,a.kt)("details",{style:{},className:"openapi-markdown__details"},(0,a.kt)("summary",{style:{}},(0,a.kt)("strong",null,"listings"),(0,a.kt)("span",{style:{opacity:"0.6"}}," object")),(0,a.kt)("div",{style:{marginLeft:"1rem"}},(0,a.kt)(p.Z,{collapsible:!1,name:"listing_id",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,a.kt)(p.Z,{collapsible:!1,name:"product_id",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,a.kt)(p.Z,{collapsible:!1,name:"sku_id",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}))))))),(0,a.kt)(c.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,a.kt)(o.Z,{responseExample:'{\n  "next_page_id": "string",\n  "has_more": true,\n  "listings": {\n    "listing_id": "string",\n    "product_id": "string",\n    "sku_id": "string"\n  }\n}',language:"json",mdxType:"ResponseSamples"})))))))))))}k.isMDXComponent=!0}}]);